<?xml version='1.0' encoding='utf-8'?>
<package xmlns="http://www.idpf.org/2007/opf" unique-identifier="uuid_id">
    <metadata xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:opf="http://www.idpf.org/2007/opf">
        <dc:identifier opf:scheme="calibre" id="calibre_id">1632</dc:identifier>
        <dc:identifier opf:scheme="uuid" id="uuid_id">f36d9721-73cd-4a5c-9cd6-fdccd3fe9dd6</dc:identifier>
        <dc:title>The Pragmatic Programmer: From Journeyman to Master</dc:title>
        <dc:creator opf:file-as="Hunt, Andrew &amp; Thomas, David" opf:role="aut">Andrew Hunt</dc:creator>
        <dc:creator opf:file-as="Hunt, Andrew &amp; Thomas, David" opf:role="aut">David Thomas</dc:creator>
        <dc:contributor opf:file-as="calibre" opf:role="bkp">calibre (0.8.38) [http://calibre-ebook.com]</dc:contributor>
        <dc:date>1999-10-20T06:00:00+00:00</dc:date>
        <dc:description>&lt;div&gt;&lt;h3&gt;Amazon.com Review&lt;/h3&gt;&lt;p&gt;Programmers are craftspeople trained to use a certain set of tools (editors, object managers, version trackers) to generate a certain kind of product (programs) that will operate in some environment (operating systems on hardware assemblies). Like any other craft, computer programming has spawned a body of wisdom, most of which isn't taught at universities or in certification classes. Most programmers arrive at the so-called tricks of the trade over time, through independent experimentation. In &lt;em&gt;The Pragmatic Programmer&lt;/em&gt;, Andrew Hunt and David Thomas codify many of the truths they've discovered during their respective careers as designers of software and writers of code.&lt;/p&gt;&lt;p&gt;Some of the authors' nuggets of pragmatism are concrete, and the path to their implementation is clear. They advise readers to learn one text editor, for example, and use it for everything. They also recommend the use of version-tracking software for even the smallest projects, and promote the merits of learning regular expression syntax and a text-manipulation language. Other (perhaps more valuable) advice is more light-hearted. In the debugging section, it is noted that, "if you see hoof prints think horses, not zebras." That is, suspect everything, but start looking for problems in the most obvious places. There are recommendations for making estimates of time and expense, and for integrating testing into the development process. You'll want a copy of &lt;em&gt;The Pragmatic Programmer&lt;/em&gt; for two reasons: it displays your own accumulated wisdom more cleanly than you ever bothered to state it, and it introduces you to methods of work that you may not yet have considered. Working programmers will enjoy this book. &lt;em&gt;--David Wall&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Topics covered&lt;/strong&gt;: A useful approach to software design and construction that allows for efficient, profitable development of high-quality products. Elements of the approach include specification development, customer relations, team management, design practices, development tools, and testing procedures. This approach is presented with the help of anecdotes and technical problems. &lt;/p&gt;&lt;h3&gt;From the Publisher&lt;/h3&gt;&lt;p&gt;As a reviewer I got an early opportunity to read the book you are holding. It was great, even in draft form. Dave Thomas and Andy Hunt have something to say, and they know how to say it. I saw what they were doing and I knew it would work. I asked to write this foreword so that I could explain why. &lt;/p&gt;&lt;p&gt;Simply put, this book tells you how to program in a way that you can follow. You wouldn't think that that would be a hard thing to do, but it is. Why? For one thing, not all programming books are written by programmers. Many are compiled by language designers, or the journalists who work with them to promote their creations. Those books tell you how to talk in a programming language---which is certainly important, but that is only a small part of what a programmer does. &lt;/p&gt;&lt;p&gt;What does a programmer do besides talk in programming language? Well, that is a deeper issue. Most programmers would have trouble explaining what they do. Programming is a job filled with details, and keeping track of those details requires focus. Hours drift by and the code appears. You look up and there are all of those statements. If you don't think carefully, you might think that programming is just typing statements in a programming language. You would be wrong, of course, but you wouldn't be able to tell by looking around the programming section of the bookstore. &lt;/p&gt;&lt;p&gt;In &lt;em&gt;The Pragmatic Programmer&lt;/em&gt; Dave and Andy tell us how to program in a way that we can follow. How did they get so smart? Aren't they just as focused on details as other programmers? The answer is that they paid attention to what they were doing while they were doing it---and then they tried to do it better. &lt;/p&gt;&lt;p&gt;Imagine that you are sitting in a meeting. Maybe you are thinking that the meeting could go on forever and that you would rather be programming. Dave and Andy would be thinking about why they were having the meeting, and wondering if there is something else they could do that would take the place of the meeting, and deciding if that something could be automated so that the work of the meeting just happens in the future. Then they would do it. &lt;/p&gt;&lt;p&gt;That is just the way Dave and Andy think. That meeting wasn't something keeping them from programming. It was programming. And it was programming that could be improved. I know they think this way because it is tip number two: Think About Your Work. &lt;/p&gt;&lt;p&gt;So imagine that these guys are thinking this way for a few years. Pretty soon they would have a collection of solutions. Now imagine them using their solutions in their work for a few more years, and discarding the ones that are too hard or don't always produce results. Well, that approach just about defines pragmatic. Now imagine them taking a year or two more to write their solutions down. You might think, That information would be a gold mine. And you would be right. &lt;/p&gt;&lt;p&gt;The authors tell us how they program. And they tell us in a way that we can follow. But there is more to this second statement than you might think. Let me explain. &lt;/p&gt;&lt;p&gt;The authors have been careful to avoid proposing a theory of software development. This is fortunate, because if they had they would be obliged to warp each chapter to defend their theory. Such warping is the tradition in, say, the physical sciences, where theories eventually become laws or are quietly discarded. Programming on the other hand has few (if any) laws. So programming advice shaped around wanna-be laws may sound good in writing, but it fails to satisfy in practice. This is what goes wrong with so many methodology books. &lt;/p&gt;&lt;p&gt;I've studied this problem for a dozen years and found the most promise in a device called a pattern language. In short, a pattern is a solution, and a pattern language is a system of solutions that reinforce each other. A whole community has formed around the search for these systems. &lt;/p&gt;&lt;p&gt;This book is more than a collection of tips. It is a pattern language in sheep's clothing. I say that because each tip is drawn from experience, told as concrete advice, and related to others to form a system. These are the characteristics that allow us to learn and follow a pattern language. They work the same way here. &lt;/p&gt;&lt;p&gt;You can follow the advice in this book because it is concrete. You won't find vague abstractions. Dave and Andy write directly for you, as if each tip was a vital strategy for energizing your programming career. They make it simple, they tell a story, they use a light touch, and then they follow that up with answers to questions that will come up when you try. &lt;/p&gt;&lt;p&gt;And there is more. After you read ten or fifteen tips you will begin to see an extra dimension to the work. We sometimes call it QWAN, short for the quality without a name. The book has a philosophy that will ooze into your consciousness and mix with your own. It doesn't preach. It just tells what works. But in the telling more comes through. That's the beauty of the book: It embodies its philosophy, and it does so unpretentiously. &lt;/p&gt;&lt;p&gt;So here it is: an easy to read---and use---book about the whole practice of programming. I've gone on and on about why it works. You probably only care that it does work. It does. You will see. --&lt;em&gt;Ward Cunningham&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</dc:description>
        <dc:publisher>Addison-Wesley Professional</dc:publisher>
        <dc:identifier opf:scheme="AMAZON">B000SEGEKI</dc:identifier>
        <dc:language>eng</dc:language>
        <meta content="{&quot;Andrew Hunt&quot;: &quot;&quot;, &quot;David Thomas&quot;: &quot;&quot;}" name="calibre:author_link_map"/>
        <meta content="8" name="calibre:rating"/>
        <meta content="2013-05-24T16:35:55+00:00" name="calibre:timestamp"/>
        <meta content="Pragmatic Programmer: From Journeyman to Master, The" name="calibre:title_sort"/>
    </metadata>
    <guide>
        <reference href="Pragmatic Programmer_ From Journeyman to Master, The - Andrew Hunt &amp; David Thomas.jpg" type="cover" title="Cover"/>
    </guide>
</package>
